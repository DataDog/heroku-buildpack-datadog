#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

DELETE_PACKAGES=(kubernetes lxml openstack pysnmp_mibs pyVim pyVmomi)

# Fail fast
set -e
set -o pipefail

# Debug
# set -x

# Set agent pinned version
DD_AGENT_PINNED_VERSION_6="6.26.0-1"
DD_AGENT_PINNED_VERSION_7="7.26.0-1"

# Parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=$(cd "$(dirname "$0")"; cd ..; pwd)

# Store which STACK we are running on in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.apt/STACK ]; then
  CACHED_STACK=$(cat "$CACHE_DIR/.apt/STACK")
else
  CACHED_STACK=$STACK
fi

# Ensure we store the STACK in the cache for next time.
mkdir -p "$CACHE_DIR/.apt"
echo "$STACK" > "$CACHE_DIR/.apt/STACK"

# If a version hasn't been specified, use the pinned version
if [ -f "$ENV_DIR/DD_AGENT_VERSION" ]; then
  DD_AGENT_VERSION=$(cat "$ENV_DIR/DD_AGENT_VERSION")
else
  if [ -f "$ENV_DIR/DD_AGENT_MAJOR_VERSION" ]; then
    DD_AGENT_MAJOR_VERSION=$(cat "$ENV_DIR/DD_AGENT_MAJOR_VERSION")
    if [ "$DD_AGENT_MAJOR_VERSION" == "7" ]; then
      DD_AGENT_VERSION="$DD_AGENT_PINNED_VERSION_7"
    else
      DD_AGENT_VERSION="$DD_AGENT_PINNED_VERSION_6"
    fi
  else
    DD_AGENT_VERSION="$DD_AGENT_PINNED_VERSION_6"
  fi
fi

# Store which Datadog agent we deployed in the previous compile to bust the cache if it changes
if [ -f $CACHE_DIR/.apt/DD_AGENT_VERSION ]; then
  CACHED_DD_AGENT_VERSION=$(cat "$CACHE_DIR/.apt/DD_AGENT_VERSION")
else
  CACHED_DD_AGENT_VERSION=$DD_AGENT_VERSION
fi

# Ensure we store the agent version in the cache for next time.
echo "$DD_AGENT_VERSION" > "$CACHE_DIR/.apt/DD_AGENT_VERSION"

# Load formating tools
source "$BUILDPACK_DIR/bin/common.sh"

# Setup apt environment
APT_DIR="$BUILD_DIR/.apt"
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_REPO_FILE="$BUILDPACK_DIR/etc/datadog.list"
APT_REPO_FILE_7="$BUILDPACK_DIR/etc/datadog7.list"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

# Create build and run environment
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p "$APT_DIR"

if [[ $CACHED_STACK == $STACK ]] && [[ $CACHED_DD_AGENT_VERSION == $DD_AGENT_VERSION ]]; then
  # STACK nor DD_AGENT_VERSION have changed, reusing cache
  topic "Stack version and agent version haven't changed, reusing cache"
else
  # STACK or DD_AGENT_VERSION changed, clean up APT cache
  topic "Detected Stack and/or agent version changes, flushing cache"
  rm -rf $APT_CACHE_DIR
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
fi

# Install dependencies
topic "Updating apt caches for dependencies"
apt-get $APT_OPTIONS update | indent


# Install GPG key
topic "Install gpg key for Datadog APT Repository"
APT_KEYRING="$CACHE_DIR/apt/trusted.gpg"
GPG_KEY_FILE="$BUILDPACK_DIR/etc/datadog.gpg"
GPG_HOME_DIR="$BUILD_DIR/.gnupg"
mkdir -p "$GPG_HOME_DIR"
gpg --ignore-time-conflict --no-options --no-default-keyring --homedir "$GPG_HOME_DIR" --keyring "$APT_KEYRING" --import "$GPG_KEY_FILE" | indent


# Prior to Agent 6.14 there was only 1 python version
DD_AGENT_BASE_VERSION="6.14"
if [ "$DD_AGENT_VERSION" == "$(echo -e "$DD_AGENT_BASE_VERSION\n$DD_AGENT_VERSION" | sort -V | head -n1)" ]; then
  DD_PYTHON_VERSION="2"
else
  if [ -f "$ENV_DIR/DD_PYTHON_VERSION" ]; then
    DD_PYTHON_VERSION=$(cat "$ENV_DIR/DD_PYTHON_VERSION")
    if [ "$DD_PYTHON_VERSION" != "2" ] && [ "$DD_PYTHON_VERSION" != "3" ]; then
      topic "ERROR: Wrong Python version: \"$DD_PYTHON_VERSION\"."
      echo "Set DD_PYTHON_VERSION to either 2 or 3." | indent
      exit 1
    fi
  else
    DD_PYTHON_VERSION="2" # if not specified, we default to Python 2
  fi
fi

# Agent 7 onwards is Python3 only and repo file is different
DD_AGENT_BASE_VERSION="7"
if [ "$DD_AGENT_VERSION" != "$(echo -e "$DD_AGENT_BASE_VERSION\n$DD_AGENT_VERSION" | sort -V | head -n1)" ]; then
  DD_PYTHON_VERSION="3"
  # Modify repo file to point to agent 7
  cp "$APT_REPO_FILE_7" "$APT_REPO_FILE"
fi

# Install Datadog Agent
topic "Updating apt caches for Datadog Agent"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Trusted=$APT_KEYRING -o Dir::Etc::SourceList=$APT_REPO_FILE"
apt-get $APT_OPTIONS update | indent

# Accommodate for earlier pinned versions. Give deprecation warning.
if [[ "$DD_AGENT_VERSION" == *"_amd64" ]]; then
  # Update the version to remove "_amd64"
  DD_AGENT_VERSION=${DD_AGENT_VERSION/_amd64/}
  topic "WARNING: Version pinning has been updated. Please update your pinned version to $DD_AGENT_VERSION"
  echo "To update, run: heroku config:set DD_AGENT_VERSION=$DD_AGENT_VERSION" | indent
fi

AGENT_VERSIONS=$(apt-cache $APT_OPTIONS show datadog-agent | grep "Version: ")
AGENT_VERSIONS=$(sed 's/Version: 1://g' <<<"$AGENT_VERSIONS")

# If specified version doesn't exist, list available versions.
if [ -z $(echo "$AGENT_VERSIONS" | grep -x "$DD_AGENT_VERSION") ]; then
  topic "ERROR: Version \"$DD_AGENT_VERSION\" was not found."
  echo "Available versions:" | indent
  echo "$AGENT_VERSIONS" | indent
  exit 1
fi

# Set the  specified version.
PACKAGE="datadog-agent=1:$DD_AGENT_VERSION"

topic "Downloading Datadog Agent $DD_AGENT_VERSION"
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall --no-install-recommends "$PACKAGE" | indent

DPKG_STUB="$APT_CACHE_DIR/archives/datadog-agent_1%3a"
if [ -z $DD_AGENT_VERSION ]; then
  DEB=$(ls -t "$DPKG_STUB"*.deb | head -n 1)
  DD_AGENT_VERSION=${DEB:${#DPKG_STUB}:(${#DEB}-${#DPKG_STUB}-10)}
  echo "Latest version is \"$DD_AGENT_VERSION\". To pin this version, run: heroku config:set DD_AGENT_VERSION=$DD_AGENT_VERSION" | indent
else
  DEB="$DPKG_STUB""$DD_AGENT_VERSION"_amd64.deb
fi

topic "Installing Datadog Agent"
dpkg -x "$DEB" "$APT_DIR"

# Removing unneeded content
rm -rf "$APT_DIR"/opt/datadog-agent/sources \
       "$APT_DIR"/opt/datadog-agent/embedded/share/doc \
       "$APT_DIR"/opt/datadog-agent/embedded/share/man

# Remove Cryptodome Selftest
rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python*/site-packages/Cryptodome/SelfTest

# Remove unnedded Python packages
for i in "${DELETE_PACKAGES[@]}"; do
  rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python*/site-packages/"$i"
done

# Remove the system-probe binary, only needed for network performance monitoring
rm -rf "$APT_DIR/opt/datadog-agent/embedded/bin/system-probe"
rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/libbcc*

# Remove the Security agent
rm -rf "$APT_DIR/opt/datadog-agent/embedded/bin/security-agent"

if [ -f "$ENV_DIR/DD_APM_ENABLED" ]; then
  DD_APM_ENABLED=$(cat "$ENV_DIR/DD_APM_ENABLED")
  if [ "$DD_APM_ENABLED" == "false" ]; then
    rm -rf "$APT_DIR/opt/datadog-agent/embedded/bin/trace-agent"
  fi
fi

# If the process agent hasn't been explicitly enabled, delete the agent
if [ -f "$ENV_DIR/DD_PROCESS_AGENT" ]; then
  DD_PROCESS_AGENT=$(cat "$ENV_DIR/DD_PROCESS_AGENT")
  if [ "$DD_PROCESS_AGENT" == "false" ]; then
    rm -rf "$APT_DIR/opt/datadog-agent/embedded/bin/process-agent"
  fi
else
  rm -rf "$APT_DIR/opt/datadog-agent/embedded/bin/process-agent"
fi

# We remove the unneeded version of Python
if [ "$DD_PYTHON_VERSION" = "2" ]; then
  topic "*********************************** WARNING ************************************"
  echo "Python 2 will be deprecated soon. Agent 7.x ships with Python 3 only." | indent
  echo "If you don't run custom checks or those are Python 3 ready, you can" | indent
  echo "move to Python 3 now by setting DD_PYTHON_VERSION to 3 and compiling your slug." | indent
  echo "********************************************************************************" | indent
  rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python3.* || true
  rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/libpython3* || true
  rm -f "$APT_DIR"/opt/datadog-agent/embedded/bin/pip3* || true
  rm -f "$APT_DIR"/opt/datadog-agent/embedded/bin/python3* || true
  rm -f "$APT_DIR"/opt/datadog-agent/embedded/bin/pydoc3* || true
fi
if [ "$DD_PYTHON_VERSION" = "3" ]; then
  rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python2.* || true
  rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/libpython2* || true
  rm -f "$APT_DIR"/opt/datadog-agent/embedded/bin/pip2* || true
  rm -f "$APT_DIR"/opt/datadog-agent/embedded/bin/python2* || true
  rm -f "$APT_DIR"/opt/datadog-agent/embedded/bin/pydoc* || true
fi


# Rewrite package-config files
find "$APT_DIR" -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$APT_DIR"'\1!g'

# Install the runner
topic "Installing Datadog runner"
mkdir -p "$BUILD_DIR/.profile.d"
cp "$BUILDPACK_DIR/extra/datadog.sh" "$BUILD_DIR/.profile.d/"
chmod +x "$BUILD_DIR/.profile.d/datadog.sh"
# Install the debug wrapper
topic "Installing Datadog agent wrapper"
cp "$BUILDPACK_DIR/extra/agent-wrapper" "$APT_DIR/opt/datadog-agent/bin/agent/"
chmod +x "$APT_DIR/opt/datadog-agent/bin/agent/agent-wrapper"
